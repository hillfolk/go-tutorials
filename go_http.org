#+TITLE:Go Web Dev
#+STARTUP:showall

참고: https://cryptic.io/go-http/

* golang http
Go 의 http 패키지는 http.Handler 다음과 같이 정의된 인터페이스이다. 

#+BEGIN_SRC
type Handler interface {
	ServeHTTP(ResponseWriter, *Request)
}
#+END_SRC

** http.ListenAndServe
웹서버를 구동하고 웹 요청을 받아 처리한다. 웹 요청을 처리할 핸들러를 전달하지 않으면 http.DefaultServeMux가 동작
ListenAndServe는 주어진 주소와 핸들러로 HTTP 서버를 시작합니다
** http.Handler

Handler는 구현하면 ServeHTTP(http.ResponseWriter, *http.Request) 메서드를 통해서 웹 요청을 받아서 처리한다.

- http.Request 들어오는 HTTP 요청에 대한 모든 관련 정보를 포함한다. 

- http.ResponseWriter 요청에 응답할수 있는 인터페이스이다. 


#+BEGIN_SRC

package main

import (
	"fmt"
	"log"
	"net/http"
)

type helloHandler struct{}

func (h helloHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "hello, you've hit %s\n", r.URL.Path)
}

func main() {
	err := http.ListenAndServe(":9999", helloHandler{})
	log.Fatal(err)
}
#+END_SRC

** HandlerFunc
HandlerFunc 형식은 일반 함수를 HTTP 처리기로 사용할 수 있도록하는 어댑터입니다. 
f가 적절한 서명이있는 함수이면 HandlerFunc (f)는 f를 호출하는 처리기입니다.
Handler 인터페이스를 구현하기 위해서 ServeHTTP를 전부 정의하는 것은 매우 비효율 적이다. 
http 패키지에서는 http.HandlerFunc 제공한다. Http.HandlerFunc 은 func(w http.ResponseWriter, r *http.Request) 를 반환한다.
이 기능을 이용해 파이프라인 형태로 데이터를 순차적으로 처리 할수 있다. 

#+BEGIN_SRC

http.Handle("/foo", fooHandler)

http.HandleFunc("/bar", func(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello, %q", html.EscapeString(r.URL.Path))
})

log.Fatal(http.ListenAndServe(":8080", nil))

#+END_SRC

** ServerMux
ServeMux는 HTTP 요청 멀티플렉서입니다. 들어오는 각 요청의 URL을 등록 된 패턴 목록과 비교하고 URL과 가장 일치하는 패턴의 핸들러를 호출합니다.
요청을 받으면 요청 경로에 알려진 경로 중 접두사가 있는지 확인하고 찾을 수있는 가장 긴 접두사를 선택합니다. /알려지지 않은 엔드 포인트에 대한 요청을 잡기 위해 엔드 포인트를 포괄적으로 사용 합니다. 
다음은 사용 된 몇 가지 예입니다.


#+BEGIN_SRC
package main

import (
	"fmt"
	"log"
	"net/http"
)

func main() {
	h := http.NewServeMux()

	h.HandleFunc("/foo", func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintln(w, "Hello, you hit foo!")
	})

	h.HandleFunc("/bar", func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintln(w, "Hello, you hit bar!")
	})

	h.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(404)
		fmt.Fprintln(w, "You're lost, go home")
	})

	err := http.ListenAndServe(":9999", h)
	log.Fatal(err)
}

#+END_SRC
