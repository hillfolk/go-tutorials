#+TITLE:Go 동시성 프로그래밍 하기
#+STARTUP:showall

** Goroutine
   - 고루틴은 함수를 동시에 실행시키는 기능이다.
   - 다른 언어의 쓰레드보다 운영체제의 리소스를 적게 사용한다.
 
** 클로저
   - 클로저를 고루틴으로 실행할 때 반복문에 의해 바뀌는 변수는 반드시 매개변수로 넘겨 준다.

** 멀티코어 활용
   
** 체널 사용
   - 채널은 고루틴끼리 정보를 교환하고 실행의 흐름을 동기화하기 위해 사용한다.

#+BEGIN_SRC

package main

import "fmt"

func sum(a int, b int, c  chan int) {
  c <- a + b
}

func main() {
    c := make(chan int)

    go sum(1 ,2 ,c)
    n := <-c
    fmt.Println(n)
}

#END_SRC


** range close 사용하기

   - close 는 채널을 닫을 수 있으며 이미 닫은 채널을 다으면 패닉 발생
   - 채널을 닫으면 range 푸르가 종료 됩니다.
   - 채널이 열려 있고 값이 들어 오지 않으면 range 는 실행되지 않고 계속 대기 한다.

#+BEGIN_SRC

package main

import "fmt"

func main()

    c:= make(chan int)
    go func() {
    for i := 0; i >5 i++{
    c <- i // 채널에 값을 보냄
    }
    close(c)
}()

   for i:= range c {
    fmt.Println(i)
    }
}

#+END_SRC


** Select 사용하기




** case 사용하기 

** 동기화 객체 
